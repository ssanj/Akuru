  // fc = fc.add("blog"){ save(blog) }
  // fc = labels foldLeft(fc) {(a,b) => fc.add("label")(save(Label(l)) }
  // fc.add("spendii")(find ("date" -> currentDateAsTime) delete)
  // fc.run

  //"title" -> "blah", "labels" -> "aa" :: "bb" :: Nil

  //onCol("blog") save (createDS)
  //onCol("") find ("date" -> currentDateAsTime) delete showError or printSuccess
  //onCol("") find ("date" -> currentDateAsTime) pushOnto("spends" -> createSpend(description, cost.toDouble, label)) createIfNotFound showError or printSuccess
  //onCol("") find ("date" -> currentDateAsTime) replaceWith(createDS(description, cost.toDouble, label)) createIfNotFound showError or printSuccess

  //save { blog :: labelSeq map (Lable(value = _)) }
  //update { {"date" -> currentDateAsTime} {push ("spend", createSpends)} true}


    val result = (withAkuru on(save(blog) _) on("label", labelSeq map (l => save(Label(value = l)) _)) run) getOrElse("success >>")


withAkuru -> { save(blog) } ->> { labelList.map(l => save(Label(value = l)) _) } -> { save(Admin("") }


{ withAkuru ~~> (save(blog) _) ~~> (labelList.map(l => save(Label(value = l)) _)) ~~> (blogs.map(b => save(b) _)) } ~~>()
{ withAkuru ~~> (findOne(query("title" -> "apples not oranges"))(printBlogTitle) _) } ~~>()

{ withAkuru ~~> (find(regex("labels", "ubuntu|work", i))(printBlogs) _) } ~~>() getOrElse("success >>")
{ withAkuru ~~> (find(regex("labels" -> ("ubuntu|work" / i)))(printBlogs) _) } ~~>() getOrElse("success >>")

update(regex("title" -> "Lift"/i)(Blog("LiftInAction", Seq("misc"))


findOne("labels" -> ("Functional")/i)
findOne("labels" -> ("functional")./)


findOne(nameField("PISC") and printVersionField(3)))
findOne(combine(nameField("PISC"), printVersionField(3)))

findOne(Blog.titleField -> ("blah.*"/i))
(Field -> (""/i)) and mongo and (Field -> (""/)) and

QueryObject
UpdateObject *
SortObject *

find(nameField("blah") and priorityField(5) >

find(labelsField >> "(ubuntu|work"/i) && nameField >> ("blah*"/)

----------------------------------------


sealed trait FieldTypes
sealed case class FieldDefinition[T](name:String) extends FieldTypes {
  def apply(value:T) = FieldValue[this.type, T](this, value)
}

final case class NestedFieldDefinition[P, T](pfd:FieldDefinition[P], _name:String) extends FieldDefinition[T](_name) {
  val name = pdf.name + "." + _name
}

case class FieldValue[FD <: FieldDefinition[T], T](fd:FD, value:T)


val TitleType = FieldDefinition[String]("title")
case class Title(value:String) extends FieldValue[String](TitleType, value)
case class Name(value:String) extends FieldValue[String](TitleType, value)
case class Labels(value:Seq[String]) extends FieldValue[Seq[String]](LabelType, value)

Blog(title:Title)

Blog(Title("functor"), Label(Seq("", "")))

----------------------------------------------------------------------

case class DailySpend(date:Date, spends:Spends)

object DailySpend {
 import Spend._
  val DateType = FieldDefinition[Long]("date")
  val SpendsType = FieldDefinition[Seq[Spend]]("spends")

  case class Date(value:Long) extends FieldValue(DateType, value)
  case class Spends(value:Seq[Spend]) extends FieldValue(SpendsType, value)

  object Spend {
    val CostType = NestedFieldDefinition[Double](SpendsType, "cost")
    val DescType = NestedFieldDefinition[String](SpendsType, "desc")
    val LabelsType = NestedFieldDefinition[Seq[String]](SpendsType, "labels")

    case class Cost(value:Double) extends FieldValue(CostType, value)
    case class Desc(value:String) extends FieldValue(DescType, value)
    case class Labels(value:Seq[String]]) extends FieldValue(LabelsType, value)
  }
}

case class Spend(cost:Cost, desc:Desc, labels:Labels)

ds = DailySpend(Date(120020), Spends(Seq(Spend(Cost(23.3D), Desc(""), Labels(Seq("ff","ff","ff"))))))

find(Spend.CostType > 200.00D)

(spends.cost $gt 200.00)


save (blog1) and find (titleField("storms"))) noSort withResults(b => ...) onError()
save (blog1) and find (titleField("storms"))) limitTo(5) withResults(b => ...) onError()
findOne (titleField("Storms") withResults(b =>) onError ()
findOne (Blog.title = "Storms" and Blog.labels = Seq("misc", "blah")) withResults(b =>) onError ()
find (titleField("Blog updates")) thenUpdate { set(titleField("Blog Updatees")) and set(labelsField(Seq("bl%%g")).splat) } ~~>

find (titleField("Blog updates")) thenUpdate (set(titleField("Phantom updates"))) withResults {wr => }
(find (nameField("Clean Room")) dontSort createTask withResults( t => ) onError ()) execute verifySuccess

findOne[Blog] where (titleField == "Blog Updates") withResults (b => ) onError ()
find [Blog]s where (title == "") withResults (b =>) onError ()
find [Blog]s where (titleField("Blog updates")) updateWith (set(titleField("Phantom updates"))) withResults {wr => } onError ()

( find one Blog where (titleField("Hello World Lift")) withResults (printBlog) onError(noOp) ) ~~>
( find many Blog where (labelsField ?* ("ubuntu|work"/i) and titleField ?* ("less"/i)) withResults (printBlogs) ) ~~>

update Blog where (titleField("lessons learned")) withValues (set(titleField("Lessons Learned"))) ~~>
update Blog where (titleField("lessons learned")) withValues (set(titleField("Lessons Learned"))) expectResults(_) ~~>

update (Blog) where (titleField === "lessons learned") sortedBy(titleField|ASC) withValues (set(titleField === "Lessons Learned"))
    withResults(b => ) onError()
upsert (Blog) where (titleField === "lessons learned") sortedBy(titleField|ASC) withValues (set(titleField === "Lessons Learned"))
    withResults() onError()
update many (Blog) where (titleField === "lessons learned") sortedBy(titleField|ASC) withValues (set(titleField === "Lessons Learned"))
    withResults() onError()
delete one (Blog) where (titleField === "lessons learned") sortedBy(titleField|ASC) withResults() onError()


update one Blog where titleField === "Lessons Learned" withValues b2 returnErrors
upsert one Blog  where titleField === "Lessons Learned" withValues b2 insert

modify Blog where (query) sort() updateWith() withUpdated() onError
modify Blog where (query) sort() updateWith() onError

modify Blog where  (query) sort() upsertWith() withUpdated() onError
modify Blog where  (query) sort() upsertWith() onError

remove Blog where  (query) sort() withRemoved() onError
remove  Blog where  (query) sort()  onError