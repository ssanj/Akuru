TO DO ------------------------------------------------------------------------------------------------------------------
1. Get rid of putanything. It is currently used.
2. Handle nulls in getElement
4. allow equality between 2 Fields and 2 FieldValues
5. Get rid of imports from MongoTypes.MongoObject._
6. Convert regex to Scala RegEx.
7. Add Command Objects to run any JSon command
8. Allow saving of multiple DomainObjects at once. save (list) ~~>
9. MongoWriteResult should only return Boolean. true if valid false if not. The users function should be safe (runWithEither[Option[String], Boolean]
def expectResults(f: MongoWriteResult => Option[String]): UserFunction = msafeUpdate[T](q.splat)(u)(f)(multiple)(upsert)
maybe rewrite as expectResults(f: MongoWriteResult => Any): UserFunction. expectResults wraps with runSafelyWithOptionReturnError(f).
Add a check for option. If Some(error) return that instead.
10. Find a way to not have to type in idField for each DomainObject
11. Clean up unnecessary methods on MongoObjectBehaviour
12. create example from Casbah
13. Write support and scenarios for similar to Numeric Operators:
    $pull : { field : {$gt: 3} } } removes array elements greater than 3 (could not get this to work in the console)
    $pull : { field : {<match-criteria>} } removes array elements meeting match criteria
14. Make all DSL read consistently. See update/upsert and modify syntax
15. Find a way to write arbitrary type safe json/bson.
16. Regex does not work for Numbers. Eg. (dateField === (".*"/) yields nothing
17. Update doco.
18. You can currently do this: $set(costField === 60.00D) & descriptionField === "updated". This does not make sense. Use the type system to
disallow this. $set(costField === 60.00D & descriptionField === "updated") is fine and so is
$set(costField === 60.00D) & $set(descriptionField === "updated")
19. Implement other MongoCursor methods:
    count()
    skip()
    snapshot()
20. Test $set which updates an array of NestedObjects.
21. Add DBRef/MongoRef as a possible field.
22. Create separate tests for:
    1. $set
    2. $push
    3. $pull
23. Use Primitives where needed.
24. Add support for Array operations:
    $in
    $nin
    $pop
    $all
    $slice

25. Reuse embedded objects
26. Embbedded object need to be defined in a cleaner way
27. collection names should use classOf[M] to find collection name.
28. add type classes to fields. One for deserialization.
29. Consider separating id from the object and using a Tuple2[Id, T]
30. Add date functions (<,>, >=, <=, |<>|)
31. Add Optional converters for primitives.
32. Add MongoServerOptions.
33. Clean up MongoCollection (has redundant constructor parameters)
34. Test AkuruMongoWrapper.

Done -------------------------------------------------------------------------------------------------------------------

1. find one has an onError clause while find many does not (done  by unifying findOne and findMany)
2. update many does not exist (done)
3. renamed update operations to include $: $set, $put, $push etc (done)
4. Get rid of Splat for arrays. Arrays should work as per everything else (done)
5. Are Query objects needed? (done)
6. Clean up update operator syntax. (set (field === value) and set (field2 === value2)) is ugly.
 (done - we can now do set(field1 === value1 & field2 === value2)
7. update one/many have an unnecessary returnErrors clause. Remove. (done. we need this.)
8. Make Order subdsl better. Current Order(field1, ASC|DSC) -> OrderBy field1 | ASC (done. We can now use field1 -> ASC)
9. make field search type safe on the owner object. (done)
10. Rename and2 in FieldValueJoiner (done)
11. simplify FieldValueJoiner to one class. (done)
12. Migrate find one, many and update to use FieldValueJoiners. (done)
13. Make Regex typesafe. (done for find one, find many, update) (done)
14. Remove ?* syntax for regex. (done)
15. Make set() type-safe MongoUpdateObject needs a type of O <: DomainObject. (done)
16. Make Order method type-safe. (done)
17. Do we need find one and many? Can't we used find (many returned by default) (done)
18. Unifiy update|updsert|findModifyReturn|findModifyDelete|findModifyUpsert (done through update and modify and remove)
19. Make SortObjectJoiner type safe or remove it all together. (done)
20. Order now takes in a list of field and SortOrders. Eg. constrainBy (Order(field1 -> ASC, field2 -> DSC)) (done)
21. Rename FieldValueJoiner to Query (done)
22. Need to use find without (). Eg find (Blog) should be find Blog. (done)
23. NestedFields should append "." to each level of nesting when doing a query. (done)
24. Make NestedFields and NestedObjects the only fields to access nestedMethods. (putNestedObject) (done)
24. $push does not work. (done)
25. Update UpdateObject to set the correct path for NestedObjects. (done)
26. Create definitions for implicits on the template domain object.s (done)
27. Better array support. Something of the sort: [F[_] <: Traversable[_], T <: DomainObject](value:F[T])
28. Automate collection name from supplied Types. (done)
29. putId(domain.id.value) should be putId(domain.id) to be consistent. (done)
30. Created NestedFields for nested objects (done)
31. add type classes to fields. One for serialization (done!)
32. Add ObjectId as a possible field. (done)
33. Add a timeout for connects. (done - connections are now closed!)
34. Automate persistence of fields. (done)
35. Remove WrapWith trait (done)
36. Add test suites for FutureConnection. (done)
37. Add Server configuration options (Eg. default database, etc) (done)
38. Add a Config declaration. (done)
39. Clean up how additional database names are defined. Add a templat that can be reused. (done)
Eg. def defineDBName[T <: DomainObject](dt:DomainTemplate[T]): DBName[T]
    implicit def blogDBName = defineDBName[Blog]
40. Move Find, Drop and Save DSL tests over to new DSL structure. (done)

Not doing --------------------------------------------------------------------------------------------------------------

1. Make defined fields typesafe. Eg. You shouldn't be able to do Person(name:String) instead of Person(name:nameField.Value) (not doing)
2. Automate retrieval of fields. (not doing)