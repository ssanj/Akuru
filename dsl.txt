{} = supplied by the user
() = optional
[] = one of
all other text is part of the DSL

regex
------

(string / [i|x|dot|litera|m|u|d|none| ])

(".*"/)
(".*"/i)

/ or none implies case-sensitive searches.

used in query field via the ?* operator.

DomainObject.field1 === ("title*"/)

operator
-------------

operators [lt | lte | gt | gte | between | < | <= | > | >= | |<>|]

DomainObject.field1 > (5)
DomainObject.field1 between (6, 8)

query (FieldValues, Regex and Operators can be used as part of a query)
-----

DomainObject.field1(value1) and DomainObject.field2(value2)
DomainObject.field1 === value1 and DomainObject.field2 === value2
DomainObject.field1 ?* ("regex"/[i/u/o/]) and DomainObject.field2 === value and DomainObject.field3 ?* ("regex"/)

find
----
find {DomainObject} where {query} (constrainedBy{Limit|Order(field -> (ASC|DSC))}*) withResults {handler} withoutResults {errorHandler}

find (X) where (field1 === value1 and field2 === value2) withResults (b => doSomething) withoutResults (handleError)
find (X) where (field1 === value1) constrainedBy (Limit(N) and Order(field1 -> ASC, field2 -> DSC)) withResults {b => doSomething)  withoutResults (handleError)

The handler function is (Seq[DomainObject] => Option[String]). If there is an error handling the results then return Some(errorMessage) else None.
The errorHandler function is => Option[String]. If you want processing to stop at this point return Some(errorMessage) else None.

Any Exceptions thrown in either function will cause the processing of subsequent statements to stop. The Exception message will be returned as a
Some(errorMessage) after execution.

update
------

update {one|many} {DomainObject} where {query} withValues {UpdatedDomainObject} {returnErrors|handler}

//X is replaced by Y.
update one X where field1 === value1 withValues (Y) returnErrors

//use set to update only some fields
update one X where field1 === value1 withValues (set(field1 === value2 & field2 === value 2)) returnErrors

update one X where field1 === value1 withValues (Y) expectResults {wr => wr.getN == Some(1)}

The format of the handler functions is MongoWriteResult => Option[String]. Return None if all is good or return a Some(errorMessage) if you
wish to stop execution.
