  // fc = fc.add("blog"){ save(blog) }
  // fc = labels foldLeft(fc) {(a,b) => fc.add("label")(save(Label(l)) }
  // fc.add("spendii")(find ("date" -> currentDateAsTime) delete)
  // fc.run

  //"title" -> "blah", "labels" -> "aa" :: "bb" :: Nil

  //onCol("blog") save (createDS)
  //onCol("") find ("date" -> currentDateAsTime) delete showError or printSuccess
  //onCol("") find ("date" -> currentDateAsTime) pushOnto("spends" -> createSpend(description, cost.toDouble, label)) createIfNotFound showError or printSuccess
  //onCol("") find ("date" -> currentDateAsTime) replaceWith(createDS(description, cost.toDouble, label)) createIfNotFound showError or printSuccess

  //save { blog :: labelSeq map (Lable(value = _)) }
  //update { {"date" -> currentDateAsTime} {push ("spend", createSpends)} true}


    val result = (withAkuru on(save(blog) _) on("label", labelSeq map (l => save(Label(value = l)) _)) run) getOrElse("success >>")


withAkuru -> { save(blog) } ->> { labelList.map(l => save(Label(value = l)) _) } -> { save(Admin("") }


{ withAkuru ~~> (save(blog) _) ~~> (labelList.map(l => save(Label(value = l)) _)) ~~> (blogs.map(b => save(b) _)) } ~~>()
{ withAkuru ~~> (findOne(query("title" -> "apples not oranges"))(printBlogTitle) _) } ~~>()

{ withAkuru ~~> (find(regex("labels", "ubuntu|work", i))(printBlogs) _) } ~~>() getOrElse("success >>")
{ withAkuru ~~> (find(regex("labels" -> ("ubuntu|work" / i)))(printBlogs) _) } ~~>() getOrElse("success >>")

update(regex("title" -> "Lift"/i)(Blog("LiftInAction", Seq("misc"))


findOne("labels" -> ("Functional")/i)
findOne("labels" -> ("functional")./)


findOne(nameField("PISC") and printVersionField(3)))

findOne(combine(nameField("PISC"), printVersionField(3)))